<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>抓取网页数据</title>
      <link href="/2024/05/22/zhua-qu-wang-ye-shu-ju/"/>
      <url>/2024/05/22/zhua-qu-wang-ye-shu-ju/</url>
      
        <content type="html"><![CDATA[<h1 id="实用机器学习–网页数据抓取"><a href="#实用机器学习–网页数据抓取" class="headerlink" title="实用机器学习–网页数据抓取"></a>实用机器学习–网页数据抓取</h1><p>在机器学习任务中从网页抓取数据是很必要的，本文介绍一次抓取网页评论的实践</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line">chrome_options = webdriver.ChromeOptions()</span><br><span class="line">chrome_options.headless = <span class="literal">True</span></span><br><span class="line">chrome = webdriver.Chrome(options=chrome_options)</span><br><span class="line"><span class="comment">#webdriver配置</span></span><br><span class="line"></span><br><span class="line">chrome.get(<span class="string">'url'</span>)</span><br><span class="line">page = chrome.page_source</span><br><span class="line"><span class="comment">#获取网页</span></span><br><span class="line"></span><br><span class="line">pages=BeautifulSoup(page, <span class="string">'html.parser'</span>)</span><br><span class="line">comments = [a.text <span class="keyword">for</span> a <span class="keyword">in</span> pages.find(<span class="string">'div'</span>,<span class="string">'comments-list'</span>).find_all(<span class="string">'p'</span>)]</span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> comments:</span><br><span class="line">    <span class="built_in">print</span>(item)</span><br><span class="line"><span class="comment">#抓取网页中评论信息</span></span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> 实用机器学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mac跨网络远程桌面</title>
      <link href="/2024/05/13/mac-kua-wang-luo-yuan-cheng-zhuo-mian/"/>
      <url>/2024/05/13/mac-kua-wang-luo-yuan-cheng-zhuo-mian/</url>
      
        <content type="html"><![CDATA[<h1 id="Mac跨网络远程桌面"><a href="#Mac跨网络远程桌面" class="headerlink" title="Mac跨网络远程桌面"></a>Mac跨网络远程桌面</h1><p>本人有一台Macbook air续航优秀，实验室放着一台windows，故想在外面的时候也能访问本地文件或应用</p><p>遂尝试远程桌面</p><p>mac端需要microsoft remote desktop</p><p>win端需要打开远程权限（具体可自行Google）</p><h2 id="试错1"><a href="#试错1" class="headerlink" title="试错1"></a>试错1</h2><p>按照Google到的一些远程app厂家的指导，并不可以连接</p><p>想跨网络连接需要穿透内网或者就付费市面上的远程桌面app</p><h2 id="试错2"><a href="#试错2" class="headerlink" title="试错2"></a>试错2</h2><p>本着能不付费就不付费的原则，开始试错</p><p>先尝试了在路由器端设置端口转发</p><p>此时仍无法连接</p><h2 id="成功经验"><a href="#成功经验" class="headerlink" title="成功经验"></a>成功经验</h2><p>但在路由器上看到路由器自带了一个叫ZeroTier的VPN软件</p><p>突然想到是不是可以在路由器上实现VPN连接呢？</p><p>在查这个软件时发现这个东西这么简单易用，遂尝试之</p><p>发现两台电脑都连接路由器的网络id后仍然无法成功</p><p>然后尝试让mac连接win的id</p><p>成功！！</p><p>然后设置了一些允许网卡在睡眠中唤醒PC，就可以实现随时随地访问实验室的PC了</p><h2 id="具体步骤"><a href="#具体步骤" class="headerlink" title="具体步骤"></a>具体步骤</h2><ol><li><p>在win和mac端都下载zerotier</p></li><li><p>打开一系列允许连接选项，将两台都连接到同一id</p></li><li><p>在这个id下管理网络，查看两台的IP（zerotier会给两台分配IP）</p></li><li><p>在mac端microsoft remote desktop上使用分配的IP连接</p></li><li><p>账号密码都是win的用户名密码（非pin，是win的注册账号密码）</p><p>然后就成功连接！</p></li></ol><h2 id="后续"><a href="#后续" class="headerlink" title="后续"></a>后续</h2><p>突然没用了</p><p>推测问题：</p><ol><li><p>端口被占用，经过查找后发现svchost.exe占用了3389，遂将其杀死</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">netstat -ano //查看所有端口使用情况</span><br><span class="line">netstat -an | findstr "3389" //若返回结果则被占用</span><br><span class="line">taskkill /PID &lt;进程ID&gt; /F</span><br></pre></td></tr></tbody></table></figure></li><li><p>按<a href="https://blog.csdn.net/anlr2020/article/details/119540139">这篇文章</a>设置了两条路由，分别是win所在网段和mac所在网段之后可以ping通，也可以重新远程</p></li></ol><p>连接不稳定的问题：</p><p>​上一秒还能ping通，下一秒就直接无法路由到，感觉是因为zerotier建在国外</p><h2 id="云服务器搭建zerotier-moon"><a href="#云服务器搭建zerotier-moon" class="headerlink" title="云服务器搭建zerotier moon"></a>云服务器搭建zerotier moon</h2><p>阿里云的服务器 Ubuntu系统</p><h4 id="第一步-在云服务器上安装-zerotier-one"><a href="#第一步-在云服务器上安装-zerotier-one" class="headerlink" title="第一步 在云服务器上安装 zerotier-one"></a>第一步 在云服务器上安装 zerotier-one</h4><p><strong>方法一 更简单</strong></p><p>shell</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ curl -s https://install.zerotier.com | sudo bash</span><br></pre></td></tr></tbody></table></figure><p><strong>方法二 更安全</strong></p><blockquote><p>要求系统中安装了 GPG</p></blockquote><p>shell</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ curl -s 'https://raw.githubusercontent.com/zerotier/ZeroTierOne/master/doc/contact%40zerotier.com.gpg' | gpg --import &amp;&amp; \</span><br><span class="line">if z=$(curl -s 'https://install.zerotier.com/' | gpg); then echo "$z" | sudo bash; fi</span><br></pre></td></tr></tbody></table></figure><h4 id="第二步-云服务器加入虚拟网络"><a href="#第二步-云服务器加入虚拟网络" class="headerlink" title="第二步 云服务器加入虚拟网络"></a>第二步 云服务器加入虚拟网络<a href="https://tvtv.fun/vps/001.html#%E7%AC%AC%E4%BA%8C%E6%AD%A5-%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%8A%A0%E5%85%A5%E8%99%9A%E6%8B%9F%E7%BD%91%E7%BB%9C"></a></h4><p>执行命令，将云服务器加入到自己创建好的虚拟网络，将命令中的 <code>xxxxxxxx</code> 替换成实际的虚拟网络 ID。</p><p>shell</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo zerotier-cli join xxxxxxxx</span><br></pre></td></tr></tbody></table></figure><h4 id="第三步-配置-Moon"><a href="#第三步-配置-Moon" class="headerlink" title="第三步 配置 Moon"></a>第三步 配置 Moon<a href="https://tvtv.fun/vps/001.html#%E7%AC%AC%E4%B8%89%E6%AD%A5-%E9%85%8D%E7%BD%AE-moon"></a></h4><p>进入 zerotier-one 程序所在的目录，默认为 <code>/var/lib/zerotier-one</code>。</p><p>shell</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ cd /var/lib/zerotier-one</span><br></pre></td></tr></tbody></table></figure><p><strong>生成 moon.json 配置文件</strong></p><p>shell</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo zerotier-idtool initmoon identity.public &gt;&gt; moon.json</span><br></pre></td></tr></tbody></table></figure><p><strong>编辑 moon.json 配置文件</strong></p><p>shell</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo nano moon.json</span><br></pre></td></tr></tbody></table></figure><p>将配置文件中的 <code>"stableEndpoints": []</code> 修改成 <code>"stableEndpoints": ["ServerIP/9993"]</code>，将 <code>ServerIP</code> 替换成云服务器的公网IP。</p><p><strong>生成 .moon 文件</strong></p><p>shell</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo zerotier-idtool genmoon moon.json</span><br></pre></td></tr></tbody></table></figure><p>将生成的 000000xxxxxxxxxx.moon 移动到 <code>moons.d</code> 目录</p><p>shell</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo mkdir moons.d</span><br><span class="line">$ sudo mv 000000xxxxxxxxxx.moon moons.d</span><br></pre></td></tr></tbody></table></figure><blockquote><p>.moon 配置文件的名一般为<code>10个前导零</code>+<code>本机的节点ID</code></p></blockquote><p><strong>重启 zerotier-one 服务</strong></p><p>shell</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo systemctl restart zerotier-one</span><br></pre></td></tr></tbody></table></figure><h4 id="使用-Moon"><a href="#使用-Moon" class="headerlink" title="使用 Moon"></a>使用 Moon<a href="https://tvtv.fun/vps/001.html#%E4%BD%BF%E7%94%A8-moon"></a></h4><p>普通的 Zerotier 成员使用 Moon 有两种方法，第一种方法是使用 <code>zerotier-cli orbit</code> 命令直接添加 Moon 节点ID；第二种方法是在 zerotier-one 程序的根目录创建<code>moons.d</code>文件夹，将 <code>xxx.moon</code> 复制到该文件夹中，我们采用第一种方法：</p><h5 id="Linux-系统下使用-Moon"><a href="#Linux-系统下使用-Moon" class="headerlink" title="Linux 系统下使用 Moon"></a>Linux 系统下使用 Moon<a href="https://tvtv.fun/vps/001.html#linux-%E7%B3%BB%E7%BB%9F%E4%B8%8B%E4%BD%BF%E7%94%A8-moon"></a></h5><p>将命令中的两组 <code>xxxxxxxxxx</code> 都替换成 moon 的节点ID。</p><p>shell</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo zerotier-cli orbit xxxxxxxxxx xxxxxxxxxx</span><br></pre></td></tr></tbody></table></figure><p>检查是否添加成功</p><p>shell</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo zerotier-cli listpeers</span><br></pre></td></tr></tbody></table></figure><h5 id="Windows-系统下使用-Moon"><a href="#Windows-系统下使用-Moon" class="headerlink" title="Windows 系统下使用 Moon"></a>Windows 系统下使用 Moon<a href="https://tvtv.fun/vps/001.html#windows-%E7%B3%BB%E7%BB%9F%E4%B8%8B%E4%BD%BF%E7%94%A8-moon"></a></h5><p>以管理员身份打开 PowerShell，将命令中的两组 <code>xxxxxxxxxx</code> 都替换成 moon 的节点ID。</p><p>powershell</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PS C:\Windows\system32&gt; zerotier-cli.bat orbit xxxxxxxxxx xxxxxxxxxx</span><br></pre></td></tr></tbody></table></figure><p>检查是否添加成功</p><p>powershell</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PS C:\Windows\system32&gt; zerotier-cli.bat listpeers</span><br></pre></td></tr></tbody></table></figure><blockquote><p><strong>提示</strong>：Windows 系统的默认程序目录位于 <code>C:\Program Files (x86)\ZeroTier\One</code>。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 番外 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>个人博客站搭建</title>
      <link href="/2024/05/13/ge-ren-bo-ke-zhan-da-jian/"/>
      <url>/2024/05/13/ge-ren-bo-ke-zhan-da-jian/</url>
      
        <content type="html"><![CDATA[<h1 id="个人博客站"><a href="#个人博客站" class="headerlink" title="个人博客站"></a>个人博客站</h1><h3 id="1-安装-Node-js"><a href="#1-安装-Node-js" class="headerlink" title="1. 安装 Node.js"></a>1. 安装 Node.js</h3><p>官网：<a href="https://nodejs.org/en/">nodejs.org</a></p><p>安装后在 cmd 命令行输入 <code>node -v</code> 即可查看版本。</p><h3 id="2-注册-GitHub"><a href="#2-注册-GitHub" class="headerlink" title="2. 注册 GitHub"></a>2. 注册 GitHub</h3><p>注册后，创建仓库：<a href="https://github.com/username/username.github.io">https://github.com/username/username.github.io</a></p><p>此时在浏览器中已经可以访问域名：<a href="https://username.github.io/">https://username.github.io</a></p><p>注意，仓库名必须取 <code>&lt;username&gt;.github.io</code>，如果仓库取了其他名字，最后访问的域名会是：https://用户名.github.io/仓库名/</p><h3 id="3-下载-Git"><a href="#3-下载-Git" class="headerlink" title="3. 下载 Git"></a>3. 下载 Git</h3><p>官网：<a href="https://gitforwindows.org/">gitforwindows.org</a></p><p>安装时按照默认配置即可，其中有个 MinTTY 终端模拟器的选项会默认选上，如果不选则会使用 Windows 自带的终端 cmd 显示 Git 。</p><p>安装后在 cmd 命令行输入 <code>git</code> 即可调出功能目录。</p><p>此后就在 cmd 中配置 Git 个人基本信息（绑定 GitHub）：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name "username"</span><br><span class="line">git config --global user.email "631670924@qq.com"</span><br></pre></td></tr></tbody></table></figure><p>配置完才后续才可以正常提交远程仓库（详见博客 Git 分类下其他文章）。</p><h3 id="4-配置-GitHub-SSH"><a href="#4-配置-GitHub-SSH" class="headerlink" title="4. 配置 GitHub SSH"></a>4. 配置 GitHub SSH</h3><p>该步骤旨在建立当前主机与 GitHub 的安全连接，以后提交/拉取仓库才不需要重复输入密码。如果你这台主机已经建立过 SSH 连接，那么可以跳过这一步。</p><p>打开 Git  输入命令：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C "631670924@qq.com" # 获取 SSH Key</span><br></pre></td></tr></tbody></table></figure><p>完成后，在提示路径下找到 .ssh 文件夹中的 id_rsa.pub 公钥文件，用记事本打开拷贝。</p><p>在 GitHub 个人设置中找到 SSH，新建，输入 Key。</p><p>配置后可以用如下命令测试是否成功：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> ssh -T git@github.com</span><br><span class="line"># 运行结果出现类似如下即表示成功</span><br><span class="line"># Hi username! You've successfully authenticated, but GitHub does not provide shell access.</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h3 id="5-安装-Hexo"><a href="#5-安装-Hexo" class="headerlink" title="5. 安装 Hexo"></a>5. 安装 Hexo</h3><p>官网：<a href="https://hexo.io/zh-cn/">hexo.io</a>，有中文官网。</p><p>在电脑中新建 Blog 文件夹，如 <code>D:\Blog</code>。</p><p>在 cmd 命令行打开 D 盘，用 <code>cd Blog</code>命令进入 Blog 子目录。或者在文件夹路径栏直接输入 <code>cmd</code>。</p><p>输入 Hexo 官网上的全局安装命令：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-cli -g</span><br></pre></td></tr></tbody></table></figure><p>输入初始化部署命令：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init username</span><br></pre></td></tr></tbody></table></figure><p>该步骤<em>报错</em>：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo : 无法加载文件 C:\Users\****\AppData\Roaming\npm\hexo.ps1，因为在此系统上禁止运行脚本。有关详细信息，请参阅 https</span><br><span class="line">:/go.microsoft.com/fwlink/?LinkID=135170 中的 about_Execution_Policies。</span><br><span class="line">所在位置 行:1 字符: 1</span><br></pre></td></tr></tbody></table></figure><p>解决办法：在windows设置中的开发者选项打开powershell未签名情况下运行</p><p>重新初始化部署</p><p>即可在 Blog 目录下新建<strong>博客文件夹</strong> username。用 <code>cd username</code>命令进入博客子目录。</p><p>输入安装 Node.js 包管理器命令，安装所有的依赖：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></tbody></table></figure><p>输入生成本地预览命令：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></tbody></table></figure><p>默认会生成 <code>localhost:4000</code> 端口的网址，在浏览器中可以访问。</p><h3 id="6-安装编辑器"><a href="#6-安装编辑器" class="headerlink" title="6. 安装编辑器"></a>6. 安装编辑器</h3><p>主要用于编写文档和修改配置，这里选择 VsCode 或者 Typora 均可，打开路径 <code>username/source/_posts/hello-world.md</code>，随便修改内容后保存。</p><p>在 username 目录中运行 Git 。</p><p>依次输入清理缓存、生成博客文件（静态页面）、<strong>生成本地预览</strong>命令：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo cl # 表示 clean</span><br><span class="line">hexo g  # 表示 generate</span><br><span class="line">hexo s  # 表示 server</span><br></pre></td></tr></tbody></table></figure><p>在浏览器中访问即可查看更改。之后按下 Ctrl + C 即可退出预览进程。</p><h3 id="7-将-Hexo-发布至-GitHub"><a href="#7-将-Hexo-发布至-GitHub" class="headerlink" title="7. 将 Hexo 发布至 GitHub"></a>7. 将 Hexo 发布至 GitHub</h3><p>打开路径 <code>username/_config.yml</code>，更改基础参数。</p><ul><li><code>#Site</code> 部分的站点描述自行修改</li><li><code>#URL</code> 部分，将链接改为 <a href="https://username.github.io/">https://username.github.io</a></li><li><code>#Deployment</code> 部分</li><li><code>type</code> 改为 git</li><li><code>repo</code> 改为 <a href="https://github.com/username/username.github.io.git">https://github.com/username/username.github.io.git</a></li><li><code>branch</code> 改为 main（旧版本默认分支叫 master）</li></ul><p>！！注意不要在连接外或者字段外加任何符号（官网给的括号很有误导性）</p><p>进入 Hexo 官网，复制 hexo-deployer-git 的安装命令，在 Git  中安装。</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></tbody></table></figure><p>依次输入清理缓存、生成博客文件（静态页面）、<strong>提交远程仓库</strong>命令：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo cl</span><br><span class="line">hexo g</span><br><span class="line">hexo d  # 表示 deploy，安装了上面的 hexo-deployer-git 才可用</span><br></pre></td></tr></tbody></table></figure><p>初次使用该操作可能会弹出一个 GitHub 登录界面，用于当前主机的身份验证。</p><p>在浏览器中访问 <a href="https://username.github.io/">https://username.github.io</a> 即可查看站点。</p><h2 id="Hexo-使用"><a href="#Hexo-使用" class="headerlink" title="Hexo 使用"></a>Hexo 使用</h2><p>以下介绍其他常用的 Hexo 操作命令，需要在博客文件夹下打开 Git  使用。</p><h3 id="新建文章"><a href="#新建文章" class="headerlink" title="新建文章"></a>新建文章</h3><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo n "文章名" # 代表 new</span><br></pre></td></tr></tbody></table></figure><p>文章名不需要文件后缀，会自动生成 Markdown 文件，且带有预先定义的参数（在 Front-matter 中），如标题、日期、标签等。</p><p>以下是一些常用的参数及默认设置：</p><table><thead><tr><th>参数</th><th>描述</th><th>默认值</th></tr></thead><tbody><tr><td><code>title</code></td><td>标题，最好用<strong>引号</strong>括起来</td><td>文章的文件名</td></tr><tr><td><code>date</code></td><td>建立日期</td><td>文件建立日期</td></tr><tr><td><code>updated</code></td><td>更新日期</td><td>文件更新日期</td></tr><tr><td><code>comments</code></td><td>开启文章的评论功能</td><td>true</td></tr><tr><td><code>categories</code></td><td>分类（不适用于分页）</td><td>无</td></tr><tr><td><code>tags</code></td><td>标签（不适用于分页）</td><td>无</td></tr><tr><td><code>excerpt</code></td><td>摘要，优先于 <code>&lt;!-- more --&gt;</code></td><td>无</td></tr><tr><td><code>index_img</code></td><td>文章封面图，用 /img/ 相对路径</td><td>无</td></tr><tr><td><code>math</code></td><td>公式转换，关闭时加速加载</td><td>true</td></tr><tr><td><code>sticky</code></td><td>文章置顶，数值越大越靠前</td><td>无</td></tr></tbody></table><p>注意 Hexo 采用的是 GitHub Favored Markdown，书写规范与标准 Markdown 有微小区别，可以查阅 GitHub 上的说明。</p><h3 id="布局管理"><a href="#布局管理" class="headerlink" title="布局管理"></a>布局管理</h3><p>在上面新建文章时，我们还可以制定布局：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo n [layout] "文章名" </span><br></pre></td></tr></tbody></table></figure><p>其中，<code>layout</code> 可替换为 post（文章，默认）、draft（草稿）、page（页面）。默认值可以在配置文件中修改 <code>default_layout</code> 来改动。不同布局的文件会存储在不同位置。</p><p>对于 page 布局，Hexo 会创建一个以标题为名字的目录，并在目录中放置一个 index.md 文件，页面布局顾名思义就是用来 DIY 我们博客页面的，不会被渲染。</p><p>对于 draft 布局，在建立时会被保存到 <code>source/drafts</code> 文件夹中，但不会显示在页面上，如果我们不想某一篇文章显示在页面上，也可以把它移动到该文件夹中。</p><p>此外，还有关于 draft 的一些操作：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo s --draft  # 在服务器预览时加入草稿文件</span><br><span class="line">hexo publish [layout] "文章名"  # 将草稿发布为 post 或 page</span><br></pre></td></tr></tbody></table></figure><h3 id="修改默认布局"><a href="#修改默认布局" class="headerlink" title="修改默认布局"></a>修改默认布局</h3><p>上述布局管理中的三种布局，还对应这三种模板，这些模板可以在 <code>username/scaffolds</code> 路径下找到，我们可以提前修改 post 模板，这样每次新建文章时就不需要自己添加 Front-matter 了。</p><p>以下是我修改后的 Front-matter 布局：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">title: {{ title }}</span><br><span class="line">excerpt: ''</span><br><span class="line">index_img: /img/home/</span><br><span class="line">math: false</span><br><span class="line">date: {{ date }}</span><br><span class="line">updated:</span><br><span class="line">category_bar: ["分类"]</span><br><span class="line">categories:</span><br><span class="line">tags:</span><br><span class="line">sticky: </span><br><span class="line"></span><br><span class="line">YAML</span><br></pre></td></tr></tbody></table></figure><h3 id="分类和标签"><a href="#分类和标签" class="headerlink" title="分类和标签"></a>分类和标签</h3><p>在其他系统中，分类和标签听起来很接近，但是在 Hexo 中两者有着明显的差别：分类具有顺序性和层次性，也就是说 <code>Foo, Bar</code> 不等于 <code>Bar, Foo</code>；而标签没有顺序和层次。</p><p>首先要创建「分类」和「标签」本身所在的<strong>页面</strong>，打开博客文件夹，执行 <code>hexo new page xxx</code> 命令。Fluid 主题不需要，已经自带「分类」、「标签」和「归档」页面了，故这里不展开介绍。</p><p>此后就可以 post 布局的文章指定分类和标签了，也需要在对应文章的 Front-matter 中设置。Hexo 不鼓励给一篇文章指定<strong>多个同级分类</strong>，因此需要规划好。下面是指定方法：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">categories:</span><br><span class="line"> - 技术经验</span><br><span class="line"> - 博客  # 「博客」会作为「技术经验」的子类</span><br><span class="line">tags:</span><br><span class="line"> - Hexo</span><br><span class="line"> - Git  # 「Hexo」与「Git」是同级标签</span><br><span class="line"></span><br><span class="line">YAML</span><br></pre></td></tr></tbody></table></figure><p>当然，Hexo 还提供了一种类 WordPress 的分类方式，用于指定多个同级分类：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">categories:</span><br><span class="line">- [Diary, PlayStation]</span><br><span class="line">- [Diary, Games]</span><br><span class="line">- [Life]  # 文章会同时出现在三个类别中</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> 番外 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
