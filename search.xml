<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>生信数据-差异分析</title>
      <link href="/2024/05/25/sheng-xin-shu-ju-chai-yi-fen-xi/"/>
      <url>/2024/05/25/sheng-xin-shu-ju-chai-yi-fen-xi/</url>
      
        <content type="html"><![CDATA[<h1 id="差异分析"><a href="#差异分析" class="headerlink" title="差异分析"></a>差异分析</h1><p>第一次接触生物信息方面的数据分析</p><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>差异分析是一种统计方法，用于比较两个或多个组之间的差异，以确定它们在某些方面上是否存在显著的差异。这种方法通常用于研究不同处理或条件下的平均值之间的差异，例如在生物学、社会科学和工程领域等。</p><p>在统计学中，差异分析通常包括方差分析（ANOVA）和t检验等方法。方差分析适用于比较三个或三个以上组的平均值，而t检验用于比较两组之间的平均值差异。</p><p>差异分析的目的是确定不同组之间的差异是否由随机因素引起还是真实存在的。通过差异分析，研究人员可以确定实验结果的可靠性，并得出该差异是否具有统计学上的显著性结论。</p><p>简单来说，差异分析就是分析两组数据是否有差异。比如，北方人的身高是否显著高于南方人的身高？在这其中涉及到“显著”的定义。对于显著，可以理解为判定条件。要用统计学来说话，通常是对两组数据的差异倍数进行统计学检验，得到Pvalue值，当Pvalue值达到某一阈值时，则显著差异。</p><h2 id="数据"><a href="#数据" class="headerlink" title="数据"></a>数据</h2><p>实例1：</p><table><thead><tr><th>sample_id</th><th>status</th><th>CBS</th></tr></thead><tbody><tr><td>TCGA-3C-AAAU-01A-11R-A41B-07</td><td>Tumor</td><td>0.082975</td></tr><tr><td>TCGA-3C-AALI-01A-11R-A41B-07</td><td>Tumor</td><td>1.735566</td></tr><tr><td>TCGA-3C-AALJ-01A-31R-A41B-07</td><td>Tumor</td><td>0.218099</td></tr><tr><td>TCGA-3C-AALK-01A-11R-A41B-07</td><td>Tumor</td><td>0.253263</td></tr><tr><td>TCGA-4H-AAAK-01A-12R-A41B-07</td><td>Tumor</td><td>0.724999</td></tr><tr><td>TCGA-5L-AAT0-01A-12R-A41B-07</td><td>Tumor</td><td>0.578021</td></tr><tr><td>TCGA-5L-AAT1-01A-12R-A41B-07</td><td>Tumor</td><td>0.115033</td></tr><tr><td>TCGA-5T-A9QA-01A-11R-A41B-07</td><td>Tumor</td><td>0.431569</td></tr><tr><td>TCGA-A1-A0SB-01A-11R-A144-07</td><td>Tumor</td><td>1.483055</td></tr><tr><td>TCGA-A1-A0SD-01A-11R-A115-07</td><td>Tumor</td><td>0.234501</td></tr><tr><td>TCGA-A1-A0SE-01A-11R-A084-07</td><td>Tumor</td><td>0.065572</td></tr><tr><td>TCGA-A1-A0SF-01A-11R-A144-07</td><td>Tumor</td><td>0.200881</td></tr><tr><td>TCGA-A1-A0SG-01A-11R-A144-07</td><td>Tumor</td><td>0.041804</td></tr><tr><td>TCGA-A1-A0SH-01A-11R-A084-07</td><td>Tumor</td><td>0.172872</td></tr><tr><td>TCGA-A1-A0SI-01A-11R-A144-07</td><td>Tumor</td><td>0.137241</td></tr></tbody></table><p>实例2：</p><table><thead><tr><th>gene_id</th><th>MTR</th><th>CA2</th><th>MTHFR</th><th>CBS</th><th>CYP3A4</th><th>ABCA3</th><th>INS</th><th>APOE</th><th>ALB</th><th>LPL</th><th>IL6</th><th>LDLR</th><th>PPARG</th><th>TP53</th><th>TYMS</th><th>HMOX1</th><th>TNF</th><th>SOD1</th><th>AKT1</th><th>ACE</th><th>CYP17A1</th><th>UGT1A1</th><th>PAH</th><th>SLC2A1</th><th>IGF1</th><th>HIF1A</th><th>DHFR</th><th>INSR</th><th>APOA1</th><th>CYP1B1</th><th>G6PD</th><th>CFTR</th></tr></thead><tbody><tr><td>TCGA-A7-A13D-01A-13R-A277-07</td><td>26.6761</td><td>31.0705</td><td>3.6365</td><td>1.3658</td><td>0.0745</td><td>11.6183</td><td>0</td><td>176.1593</td><td>0.4411</td><td>4.8079</td><td>0.8533</td><td>10.9195</td><td>4.6437</td><td>7.0206</td><td>3.0732</td><td>37.9242</td><td>1.6533</td><td>218.2718</td><td>33.9155</td><td>2.5628</td><td>0.0186</td><td>0</td><td>0.5042</td><td>342.5059</td><td>0.0388</td><td>95.0371</td><td>2.2299</td><td>35.4642</td><td>0</td><td>8.4701</td><td>21.75</td><td>0.222</td></tr><tr><td>TCGA-A7-A13D-01B-04R-A277-07</td><td>44.616</td><td>37.3339</td><td>4.1658</td><td>1.2419</td><td>3.8488</td><td>8.7571</td><td>0.4672</td><td>22.2659</td><td>2.2777</td><td>4.8962</td><td>3.3327</td><td>10.4941</td><td>6.4873</td><td>16.8455</td><td>6.2026</td><td>31.8951</td><td>1.8263</td><td>103.8081</td><td>23.7491</td><td>2.1982</td><td>0.317</td><td>0.6548</td><td>2.1599</td><td>214.5074</td><td>0.5287</td><td>180.8055</td><td>4.7244</td><td>35.8351</td><td>0.1398</td><td>21.6083</td><td>15.7246</td><td>3.2058</td></tr><tr><td>TCGA-B6-A401-01A-11R-A239-07</td><td>17.5202</td><td>39.6305</td><td>13.5205</td><td>0.4103</td><td>0.0621</td><td>34.6891</td><td>0</td><td>749.2979</td><td>0.7656</td><td>21.772</td><td>6.8557</td><td>25.027</td><td>14.0635</td><td>78.701</td><td>4.123</td><td>130.4268</td><td>10.9579</td><td>351.0152</td><td>44.0116</td><td>6.2992</td><td>0.031</td><td>0.0118</td><td>0.0356</td><td>52.5432</td><td>0.874</td><td>77.7779</td><td>3.835</td><td>43.8675</td><td>0.9587</td><td>64.2712</td><td>83.9743</td><td>0.1902</td></tr><tr><td>TCGA-D8-A1X8-01A-11R-A14M-07</td><td>23.2873</td><td>18.9226</td><td>6.0028</td><td>0.194</td><td>0.0584</td><td>54.0451</td><td>0</td><td>538.8055</td><td>408.266</td><td>14.3397</td><td>1.3679</td><td>55.8538</td><td>16.56</td><td>57.4119</td><td>11.0106</td><td>95.2464</td><td>5.9622</td><td>324.996</td><td>42.7747</td><td>14.8555</td><td>0.1167</td><td>0</td><td>0.0446</td><td>97.1562</td><td>2.271</td><td>38.1804</td><td>14.6977</td><td>37.5614</td><td>0.6606</td><td>56.1414</td><td>36.0665</td><td>0.0463</td></tr><tr><td>TCGA-AC-A23C-01A-12R-A169-07</td><td>35.1407</td><td>14.0669</td><td>11.6889</td><td>0.0073</td><td>0.1171</td><td>29.0874</td><td>0.0755</td><td>279.4766</td><td>1.5158</td><td>32.0491</td><td>1.0055</td><td>19.5275</td><td>6.7497</td><td>13.9272</td><td>8.5108</td><td>176.8789</td><td>15.3196</td><td>409.7355</td><td>44.6093</td><td>11.6351</td><td>0.0293</td><td>0.0111</td><td>2.974</td><td>19.7627</td><td>0.7324</td><td>93.1375</td><td>25.1077</td><td>33.1636</td><td>0.0904</td><td>52.8076</td><td>53.5636</td><td>0.2192</td></tr><tr><td>TCGA-BH-A18H-01A-11R-A12D-07</td><td>16.7145</td><td>142.1005</td><td>12.5899</td><td>0.0107</td><td>0.0214</td><td>58.8515</td><td>0</td><td>244.3998</td><td>0.4425</td><td>17.8326</td><td>11.3558</td><td>57.3165</td><td>4.1447</td><td>15.6151</td><td>3.4639</td><td>78.4375</td><td>3.2312</td><td>383.1343</td><td>41.6258</td><td>5.7644</td><td>0.1068</td><td>0</td><td>1.2738</td><td>77.1569</td><td>0.8107</td><td>83.7453</td><td>11.7675</td><td>53.3103</td><td>0.5277</td><td>29.9922</td><td>41.7912</td><td>0.0073</td></tr><tr><td>TCGA-5L-AAT0-01A-12R-A41B-07</td><td>20.8477</td><td>211.9775</td><td>24.3565</td><td>0.4928</td><td>0</td><td>20.8556</td><td>0</td><td>1226.093</td><td>0.8861</td><td>6.6237</td><td>0.2449</td><td>4.5872</td><td>4.2683</td><td>46.5115</td><td>4.772</td><td>98.4427</td><td>7.187</td><td>327.0178</td><td>47.5483</td><td>4.6764</td><td>0.0599</td><td>0.0228</td><td>0.2885</td><td>25.6499</td><td>1.2363</td><td>30.2003</td><td>7.421</td><td>28.9592</td><td>3.0514</td><td>40.6389</td><td>39.3955</td><td>0.1937</td></tr><tr><td>TCGA-BH-A202-01A-11R-A14M-07</td><td>26.0872</td><td>602.4782</td><td>9.6676</td><td>0.0854</td><td>0.0659</td><td>17.7936</td><td>0</td><td>549.2098</td><td>0.195</td><td>6.2069</td><td>0.0647</td><td>46.6286</td><td>5.1328</td><td>10.0718</td><td>10.8488</td><td>127.8219</td><td>1.3022</td><td>499.3246</td><td>20.3987</td><td>9.0998</td><td>0.0264</td><td>0</td><td>0.2357</td><td>27.9732</td><td>0.1813</td><td>196.9833</td><td>35.8278</td><td>39.5203</td><td>0</td><td>982.6845</td><td>65.5211</td><td>0.2467</td></tr><tr><td>TCGA-D8-A1XW-01A-11R-A14M-07</td><td>20.6958</td><td>472.9935</td><td>4.5556</td><td>0.0906</td><td>0.0454</td><td>35.1132</td><td>0</td><td>543.2001</td><td>0.1194</td><td>37.1343</td><td>0.3961</td><td>5.3155</td><td>2.7219</td><td>48.9182</td><td>6.3257</td><td>70.1877</td><td>2.9608</td><td>337.0358</td><td>18.6853</td><td>7.8804</td><td>0.0605</td><td>0</td><td>0.0902</td><td>78.6565</td><td>1.0856</td><td>146.3095</td><td>6.5955</td><td>52.6001</td><td>0.4206</td><td>28.5407</td><td>34.8794</td><td>29.5662</td></tr><tr><td>TCGA-EW-A2FR-01A-11R-A21T-07</td><td>21.0496</td><td>48.4191</td><td>6.319</td><td>0.7496</td><td>0.0313</td><td>25.6581</td><td>0.1615</td><td>513.8746</td><td>0.3861</td><td>22.6645</td><td>1.4854</td><td>28.398</td><td>3.9141</td><td>64.422</td><td>6.1281</td><td>216.1735</td><td>2.242</td><td>531.5811</td><td>78.5349</td><td>9.0897</td><td>0.047</td><td>0.0119</td><td>0.4022</td><td>57.2244</td><td>0.4701</td><td>159.3192</td><td>17.1896</td><td>21.853</td><td>0.1934</td><td>42.938</td><td>77.3962</td><td>0.0906</td></tr><tr><td>TCGA-A8-A07C-01A-11R-A034-07</td><td>46.2634</td><td>42.9811</td><td>10.5839</td><td>1.9071</td><td>0.1125</td><td>27.1922</td><td>0</td><td>424.975</td><td>1.3036</td><td>51.1853</td><td>2.2767</td><td>21.0247</td><td>4.6374</td><td>9.7826</td><td>46.5386</td><td>59.5475</td><td>3.4026</td><td>374.0409</td><td>26.3733</td><td>16.2108</td><td>0</td><td>0</td><td>0.0258</td><td>22.006</td><td>0.2932</td><td>77.2128</td><td>21.5195</td><td>79.2184</td><td>0.3907</td><td>36.506</td><td>44.0907</td><td>0.335</td></tr></tbody></table><h2 id="差异分析代码"><a href="#差异分析代码" class="headerlink" title="差异分析代码"></a>差异分析代码</h2><p>需要用到r语言中常用的分析工具，在python中使用r语言</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> rpy2</span><br><span class="line"><span class="keyword">from</span> rpy2.robjects <span class="keyword">import</span> r</span><br><span class="line"><span class="keyword">from</span> rpy2.robjects.packages <span class="keyword">import</span> importr</span><br><span class="line"><span class="keyword">from</span> rpy2.robjects <span class="keyword">import</span> pandas2ri</span><br><span class="line"></span><br><span class="line">pandas2ri.activate()</span><br><span class="line"></span><br><span class="line">exp=pd.read_csv(<span class="string">"1c+BRCAcsv.csv"</span>,index_col=<span class="string">'gene_id'</span>)</span><br><span class="line"></span><br><span class="line">exp=exp.transpose()</span><br><span class="line"><span class="built_in">print</span>(exp)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">group_inf=pd.read_excel(<span class="string">"CBS.xlsx"</span>,index_col=<span class="string">'sample_id'</span>)</span><br><span class="line"></span><br><span class="line">a=group_inf[<span class="string">'status'</span>].tolist()</span><br><span class="line">list1=[]   <span class="comment">##存放AD的状态向量</span></span><br><span class="line">list2=[]   <span class="comment">##存放Control的状态向量</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> a:</span><br><span class="line">    <span class="keyword">if</span> i==<span class="string">"Tumor"</span>:</span><br><span class="line">        x=<span class="number">1</span></span><br><span class="line">        y=<span class="number">0</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        x=<span class="number">0</span></span><br><span class="line">        y=<span class="number">1</span></span><br><span class="line">    list1.append(x)</span><br><span class="line">    list2.append(y)</span><br><span class="line">design=pd.DataFrame({<span class="string">'Tumor'</span>:list1,<span class="string">"Normal"</span>:list2},index=a)</span><br><span class="line"><span class="built_in">print</span>(design)</span><br><span class="line"></span><br><span class="line">limma=importr(<span class="string">"limma"</span>)</span><br><span class="line">contrast_matrix=limma.makeContrasts(<span class="string">"Tumor-Normal"</span>,levels=design)</span><br><span class="line"><span class="built_in">print</span>(contrast_matrix)</span><br><span class="line"></span><br><span class="line"><span class="comment">##数据转换</span></span><br><span class="line">rdf1=pandas2ri.py2rpy(exp)</span><br><span class="line">rdf2=pandas2ri.py2rpy(design)</span><br><span class="line"><span class="keyword">from</span> rpy2.robjects <span class="keyword">import</span> globalenv   <span class="comment">##让globalenv来激活rdf</span></span><br><span class="line">globalenv[<span class="string">'rdf1'</span>]=rdf1</span><br><span class="line">globalenv[<span class="string">'rdf2'</span>]=rdf2</span><br><span class="line">rscript=<span class="string">'''</span></span><br><span class="line"><span class="string">contrasts_matrix&lt;-makeContrasts("Tumor-Normal",levels=rdf2)</span></span><br><span class="line"><span class="string">fit&lt;-lmFit(rdf1,rdf2)</span></span><br><span class="line"><span class="string">fit2&lt;-contrasts.fit(fit,contrasts_matrix)</span></span><br><span class="line"><span class="string">fit2&lt;-eBayes(fit2)</span></span><br><span class="line"><span class="string">temp&lt;-topTable(fit2,coef=1,n=Inf)</span></span><br><span class="line"><span class="string">nrDEG=na.omit(temp)</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">r(rscript)</span><br><span class="line"></span><br><span class="line"><span class="comment">##step1</span></span><br><span class="line">fit=limma.lmFit(exp,design)</span><br><span class="line"><span class="comment">##step2</span></span><br><span class="line">fit2=limma.contrasts_fit(fit,contrast_matrix)</span><br><span class="line">fit2=limma.eBayes(fit2)</span><br><span class="line"><span class="comment">##step3</span></span><br><span class="line">DEG_ot=limma.topTable(fit2,adjust=<span class="string">"fdr"</span>,coef=<span class="number">1</span>,n=<span class="built_in">float</span>(<span class="string">"inf"</span>))</span><br><span class="line"><span class="built_in">print</span>(DEG_ot)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> 番外 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 差异分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GAN</title>
      <link href="/2024/05/25/gan/"/>
      <url>/2024/05/25/gan/</url>
      
        <content type="html"><![CDATA[<h1 id="GAN-Generative-Adversarial-Nets"><a href="#GAN-Generative-Adversarial-Nets" class="headerlink" title="GAN - Generative Adversarial Nets"></a>GAN - Generative Adversarial Nets</h1><h2 id="两个model"><a href="#两个model" class="headerlink" title="两个model"></a>两个model</h2><p>一个生成某种分布（某种图/文）</p><p>另一个分辨生成的是否为真实世界或是模型生成</p><p>生成模型尽可能让辨别模型犯错，存在这样的解（特定的分布）使得分辨模型无法识别。如果两个模型都是<em><strong>多层感知机</strong></em>，整个系统就可以通过<em><strong>误差反传（backpropagation）</strong></em>进行训练。而无需通过<em><strong>马尔科夫链</strong></em></p><h2 id="深度学习≠深度神经网络"><a href="#深度学习≠深度神经网络" class="headerlink" title="深度学习≠深度神经网络"></a>深度学习≠深度神经网络</h2><blockquote><p>The promise of deep learning is to discover rich, hierarchical models [2] that represent probability distributions over the kinds of data encountered in artificial intelligence applications, such as natural images, audio waveforms containing speech, and symbols in natural language corpora. </p><p>–GAN paper</p></blockquote><p>深度学习是去发现丰富的有多重层次的模型，这些模型可以对AI各种应用中需要的概率分布进行表示</p><p>深度学习≠深度神经网络 </p><p>深度学习做的是找到对某问题的概率分布最对的模型</p><p>深度神经网络只是深度学习的手段并非全部</p><h2 id="在辨别模型上发展好但在生成模型上发展差"><a href="#在辨别模型上发展好但在生成模型上发展差" class="headerlink" title="在辨别模型上发展好但在生成模型上发展差"></a>在辨别模型上发展好但在生成模型上发展差</h2><p>在当时并未有当下如此发展的AIGC</p><p>辨别模型由于最大化似然函数时无需近似但生成模型最大化似然函数需要对概率分布进行很多近似，这种近似带来很多困难</p><p>GAN正是不需要这种近似来达到最大似然</p><h2 id="在随机的噪声上生成分布"><a href="#在随机的噪声上生成分布" class="headerlink" title="在随机的噪声上生成分布"></a>在随机的噪声上生成分布</h2><p>生成模型是multilayer perceptron</p><p>输入是随机噪声</p><p>生成模型能够把产生随机噪声的分布（同常是高斯分布）映射到任何一个我们想要拟合的分布</p><p>GAN并非明明白白生成一个分布，而是暴力近似到和需要的分布十分接近的一个分布但并不清楚这个分布到底是怎样</p><p>好处是算的快（whatever 好用就行 怎么来的别管）</p><h2 id="Adversarial-nets"><a href="#Adversarial-nets" class="headerlink" title="Adversarial nets"></a>Adversarial nets</h2><p><em>G</em> 是带参数 <em>θ</em> 的生成模型</p><p><em>D</em> 是另一个多层感知机，输出是 <em>D(x)</em> 代表x来自数据拟合后的分布而非真正的分布的概率，1表示100%概率假</p><p>训练D去最好的分辨，同时训练G去最小化<code>log(1 − D(G(z)))</code></p><p><code>log D(x)</code>若分辨地越好，则值越接近0</p><p><code>log(1 − D(G(z)))</code>若生成地越好 <em>D(G(z))</em> 越接近0，整体越接近0</p><p>然后取两者期望，当两者都不能进步是取得Nash均衡<br>$$<br> \min_{G} \max_{D} V(D, G) = \mathbb{E}{x \sim p{data}(x)} [\log D(x)] + \mathbb{E}{z \sim p{z}(z)} [\log(1 - D(G(z)))]<br>$$<br>最终达到的效果是分辨模型分辨任何生成器生成的数据时都是1/2概率</p><p><img src="C:\Users\24958\Desktop\归档\Typora笔记\1714613735171.png" alt="1714613735171"></p><p>k是一个超参数，在过程中k不能过小过大，过小会导致分辨模型太幼稚，过大则会导致分辨模型过聪明。不利于使生成器最优化</p><h2 id="Theoretical-Results"><a href="#Theoretical-Results" class="headerlink" title="Theoretical Results"></a>Theoretical Results</h2><p>理论上G有且仅有一个最优解，就是当G模拟出的分布=实际上的分布时</p><p>对确定的G，D的最优解是（<em>表示最优解）：<br>$$<br>D_{G}^{</em>}(x) = \frac{p_{data}(x)}{p_{data}(x) + p_{g}(x)}<br>$$<br>对任意的x当G最好时，Pg都等于Pdata，于是D(x)最优解是1/2</p><p><strong>two sample test</strong> 判断两个数据是否来自同一分布</p><p>后面的数学证明<del>_</del></p>]]></content>
      
      
      <categories>
          
          <category> 研究方向 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>GCN</title>
      <link href="/2024/05/25/gcn/"/>
      <url>/2024/05/25/gcn/</url>
      
        <content type="html"><![CDATA[<h1 id="GCN"><a href="#GCN" class="headerlink" title="GCN"></a>GCN</h1><p>参考：<a href="https://www.bilibili.com/video/BV1iT4y1d7zP/">https://www.bilibili.com/video/BV1iT4y1d7zP/</a></p><h2 id="从GNN开始"><a href="#从GNN开始" class="headerlink" title="从GNN开始"></a>从GNN开始</h2><p>所谓GNN是一种作用在图上所有属性（点，边，全局上下文）的一种可优化的变换，这种变换后仍然保持图的对称性</p><p>博客中给出的GNN是使用信息传递的神经网络框架</p><p>输入是图，输出也是图</p><p>他会对点，边，全局信息的属性做改变，但不会影响连接性，也就是哪些边连接哪些点是不会变的</p><p><strong>一个简单版本的构造</strong>：</p><p>​对边向量，点向量，和全局向量分别构建一个多层感知机，这三个MLP组成一个GNN层</p><p>​这个层，输入是图，输出是同样连接性的图，但是对三个向量做了更新</p><p>​最后输出时若想预测顶点，加一个全连接层</p><p>当相对一个顶点做预测，但是这个顶点并没有他的向量。这里会用的CNN中类似的pooling</p><p>将边的向量汇聚到电上，或者将点的向量汇聚到边上</p><p>输入一张图—&gt;&gt;若干GNN层—&gt;&gt;属性变化过后的图—&gt;&gt;分类层—&gt;&gt;预测结果</p><p>这种结构的不足，在GNN网络中并没有使用到图的结构信息，点进入点的mlp，边进入边的，并没有连接关系</p><p>无法充分利用图的信息</p><p>于是做类似CNN中卷积的工作</p><p>使得最后的一层可以获取到全图的一个连接信息</p><p>为什么要有全局向量？</p><p>当图大且比较稀疏时，信息从远点传递过来需要很多步。于是虚拟了一个主节点（master node/context vector）它连接所有的点和边</p><p>在汇聚pooling或者卷积是会信息传递更快</p><h2 id="于是就到了GCN"><a href="#于是就到了GCN" class="headerlink" title="于是就到了GCN"></a>于是就到了GCN</h2><p>k层的，每层带一度邻居信息的GNN，最后从一个节点能获取到周围深度为k的所有信息</p>]]></content>
      
      
      <categories>
          
          <category> 研究方向 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>DBSCAN算法</title>
      <link href="/2024/05/25/dbscan-suan-fa/"/>
      <url>/2024/05/25/dbscan-suan-fa/</url>
      
        <content type="html"><![CDATA[<h1 id="DBSCAN算法"><a href="#DBSCAN算法" class="headerlink" title="DBSCAN算法"></a>DBSCAN算法</h1><p>DBSCAN (<strong>D</strong>ensity-<strong>B</strong>ased <strong>S</strong>patial <strong>C</strong>lustering of <strong>A</strong>pplications with <strong>N</strong>oise，具有噪声的基于密度的聚类方法) </p><p>这里利用DBSCAN主要是做道路分割</p><p>为何使用DBSCAN？</p><p>因为在田和在路上的速度不同，导致定位信息的密度不同，因此选择基于密度的聚类</p><h2 id="聚类"><a href="#聚类" class="headerlink" title="聚类"></a>聚类</h2><p>无监督学习的一种。将数据集划分为指定的群组或簇，划分成的群组内是在指定的的维度上具有相似的属性</p><p>即按照维度相近程度将数据集划分</p><p>Clustering 算法目前有 5 种常见类别：</p><ul><li>Connectivity-based clustering（基于连通性的聚类）：基于整个数据集对象间距离计算的聚类方法，近邻点比更远距离的点更具有相关性。</li><li>Centroid-based clustering（基于质心的聚类）：计算每个簇的中心向量，以此来确定每个样本所属的类别</li><li>Distribution-based clustering（基于分布的聚类）：同一簇内的数据点满足相同的分布（正态分布或高斯分布）</li><li>Density-based clustering（基于密度的聚类）：在数据空间中，搜索不同数据密度的空间区域，然后将不同密度的区域分开，同一区域内的数据点归为同一个簇</li><li>Grid-based clustering（基于网格的聚类）：通过扫描数据集，将数据空间根据所选属性划分为数个网格单元，并将样本点划分到相应的单元中，最后根据单元的密度形成簇，这种方法在低维空间中比较有效，而且只需通过扫描一遍数据集，就可以得到每个单元格中样本点的分布情况</li></ul><h2 id="DBSCAN算法思想"><a href="#DBSCAN算法思想" class="headerlink" title="DBSCAN算法思想"></a>DBSCAN算法思想</h2><p>定义参数(ϵ, MinPts)用来描述邻域的样本分布密度，参数 𝜖 描述选定点的空间半径阈值，MinPts 是半径 𝜖 下最小包含的样本数阈值</p><p>假设我的样本集是D=(x1,x2,…,xm)(𝑥1,𝑥2,…,𝑥𝑚),则DBSCAN具体的密度描述定义如下：</p><ol><li>ϵ-邻域：对于xj∈D𝑥𝑗∈𝐷，其ϵ𝜖-邻域包含样本集D中与xj𝑥𝑗的距离不大于ϵ𝜖的子样本集，即Nϵ(xj)={xi∈D|distance(xi,xj)≤ϵ}𝑁𝜖(𝑥𝑗)={𝑥𝑖∈𝐷|𝑑𝑖𝑠𝑡𝑎𝑛𝑐𝑒(𝑥𝑖,𝑥𝑗)≤𝜖}, 这个子样本集的个数记为|Nϵ(xj)||𝑁𝜖(𝑥𝑗)|　</li><li>核心对象：对于任一样本xj∈D𝑥𝑗∈𝐷，如果其ϵ𝜖-邻域对应的Nϵ(xj)𝑁𝜖(𝑥𝑗)至少包含MinPts个样本，即如果|Nϵ(xj)|≥MinPts|𝑁𝜖(𝑥𝑗)|≥𝑀𝑖𝑛𝑃𝑡𝑠，则xj𝑥𝑗是核心对象。　</li><li>密度直达：如果x<sub>i</sub>位于xj𝑥𝑗的ϵ𝜖-邻域中，且xj𝑥𝑗是核心对象，则称xi𝑥𝑖由xj𝑥𝑗密度直达。注意反之不一定成立，即此时不能说xj𝑥𝑗由xi𝑥𝑖密度直达, 除非且xi𝑥𝑖也是核心对象。</li><li>密度可达：对于xi𝑥𝑖和xj𝑥𝑗,如果存在样本样本序列p1,p2,…,pT𝑝1,𝑝2,…,𝑝𝑇,满足p1=xi,pT=xj𝑝1=𝑥𝑖,𝑝𝑇=𝑥𝑗, 且pt+1𝑝𝑡+1由pt𝑝𝑡密度直达，则称xj𝑥𝑗由xi𝑥𝑖密度可达。也就是说，密度可达满足传递性。此时序列中的传递样本p1,p2,…,pT−1𝑝1,𝑝2,…,𝑝𝑇−1均为核心对象，因为只有核心对象才能使其他样本密度直达。注意密度可达也不满足对称性，这个可以由密度直达的不对称性得出。</li><li>密度相连：对于xi𝑥𝑖和xj𝑥𝑗,如果存在核心对象样本xk𝑥𝑘，使xi𝑥𝑖和xj𝑥𝑗均由xk𝑥𝑘密度可达，则称xi𝑥𝑖和xj𝑥𝑗密度相连。注意密度相连关系是满足对称性的。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 研究方向 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode刷题记3</title>
      <link href="/2024/05/25/leetcode-shua-ti-ji-3/"/>
      <url>/2024/05/25/leetcode-shua-ti-ji-3/</url>
      
        <content type="html"><![CDATA[<h1 id="三数之和（15）"><a href="#三数之和（15）" class="headerlink" title="三数之和（15）"></a><a href="https://leetcode.cn/problems/3sum/">三数之和</a>（15）</h1><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>三个指针</p><p>先将数组排序</p><p>第一个枢轴，第二个在第一个之后，第三个在最后</p><p>确定第一个然后如果三数和大于0，第三个向前，且保证第二第三不越界，当要越界但还没找到时说明该动第一个</p><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">threeSum</span>(vector&lt;<span class="type">int</span>&gt;&amp; nums) {</span><br><span class="line">        <span class="type">int</span> n = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="built_in">sort</span>(nums.<span class="built_in">begin</span>(), nums.<span class="built_in">end</span>());</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; ans;</span><br><span class="line">        <span class="comment">// 枚举 a</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> first = <span class="number">0</span>; first &lt; n; ++first) {</span><br><span class="line">            <span class="comment">// 需要和上一次枚举的数不相同</span></span><br><span class="line">            <span class="keyword">if</span> (first &gt; <span class="number">0</span> &amp;&amp; nums[first] == nums[first - <span class="number">1</span>]) {</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            }</span><br><span class="line">            <span class="comment">// c 对应的指针初始指向数组的最右端</span></span><br><span class="line">            <span class="type">int</span> third = n - <span class="number">1</span>;</span><br><span class="line">            <span class="type">int</span> target = -nums[first];</span><br><span class="line">            <span class="comment">// 枚举 b</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> second = first + <span class="number">1</span>; second &lt; n; ++second) {</span><br><span class="line">                <span class="comment">// 需要和上一次枚举的数不相同</span></span><br><span class="line">                <span class="keyword">if</span> (second &gt; first + <span class="number">1</span> &amp;&amp; nums[second] == nums[second - <span class="number">1</span>]) {</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                }</span><br><span class="line">                <span class="comment">// 需要保证 b 的指针在 c 的指针的左侧</span></span><br><span class="line">                <span class="keyword">while</span> (second &lt; third &amp;&amp; nums[second] + nums[third] &gt; target) {</span><br><span class="line">                    --third;</span><br><span class="line">                }</span><br><span class="line">                <span class="comment">// 如果指针重合，随着 b 后续的增加</span></span><br><span class="line">                <span class="comment">// 就不会有满足 a+b+c=0 并且 b&lt;c 的 c 了，可以退出循环</span></span><br><span class="line">                <span class="keyword">if</span> (second == third) {</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                }</span><br><span class="line">                <span class="keyword">if</span> (nums[second] + nums[third] == target) {</span><br><span class="line">                    ans.<span class="built_in">push_back</span>({nums[first], nums[second], nums[third]});</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    }</span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> LeetCode题记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode刷题记2</title>
      <link href="/2024/05/25/leetcode-shua-ti-ji-2/"/>
      <url>/2024/05/25/leetcode-shua-ti-ji-2/</url>
      
        <content type="html"><![CDATA[<h1 id="最长连续序列（128）"><a href="#最长连续序列（128）" class="headerlink" title="最长连续序列（128）"></a><a href="https://leetcode.cn/problems/longest-consecutive-sequence/">最长连续序列</a>（128）</h1><h2 id="我的题解"><a href="#我的题解" class="headerlink" title="我的题解"></a>我的题解</h2><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">longestConsecutive</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>{</span><br><span class="line">        <span class="built_in">sort</span>(nums.<span class="built_in">begin</span>(),nums.<span class="built_in">end</span>());</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt;<span class="built_in">window</span>(<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span>(nums.<span class="built_in">size</span>()==<span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> max=<span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> it=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;nums.<span class="built_in">size</span>();i++){</span><br><span class="line">            <span class="keyword">if</span>(i+<span class="number">1</span>&lt;nums.<span class="built_in">size</span>()&amp;&amp;nums[i]+<span class="number">1</span>==nums[i+<span class="number">1</span>]){</span><br><span class="line">                window[it]++;</span><br><span class="line">                <span class="keyword">if</span>(window[it]&gt;max)</span><br><span class="line">                    max=window[it];</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(i+<span class="number">1</span>&lt;nums.<span class="built_in">size</span>()&amp;&amp;nums[i]==nums[i+<span class="number">1</span>]){</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">else</span>{</span><br><span class="line">                it++;</span><br><span class="line">                window.<span class="built_in">push_back</span>(<span class="number">0</span>);</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> max+<span class="number">1</span>;</span><br><span class="line">    }</span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure><p>用一个vector记录排序后的数组中连续增长的序列个数，最后输出最大的数</p><h2 id="官方题解（哈希表）"><a href="#官方题解（哈希表）" class="headerlink" title="官方题解（哈希表）"></a>官方题解（哈希表）</h2><ul><li>就是用哈希表查找这个数前面一个数是否存在，即num-1在序列中是否存在。存在那这个数肯定不是开头，直接跳过。</li><li>因此只需要对每个开头的数进行循环，直到这个序列不再连续，因此复杂度是O(n)。 以题解中的序列举例:<br><strong>[100，4，200，1，3，4，2]</strong><br>去重后的哈希序列为：<br><strong>[100，4，200，1，3，2]</strong><br>按照上面逻辑进行判断：</li></ul><ol><li>元素100是开头,因为没有99，且以100开头的序列长度为1</li><li>元素4不是开头，因为有3存在，过，</li><li>元素200是开头，因为没有199，且以200开头的序列长度为1</li><li>元素1是开头，因为没有0，且以1开头的序列长度为4，因为依次累加，2，3，4都存在。</li><li>元素3不是开头，因为2存在，过，</li><li>元素2不是开头，因为1存在，过。</li></ol><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">longestConsecutive</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>{</span><br><span class="line">        unordered_set&lt;<span class="type">int</span>&gt; num_set;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">const</span> <span class="type">int</span>&amp; num : nums) {</span><br><span class="line">            num_set.<span class="built_in">insert</span>(num);</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> longestStreak = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">const</span> <span class="type">int</span>&amp; num : num_set) {</span><br><span class="line">            <span class="keyword">if</span> (!num_set.<span class="built_in">count</span>(num - <span class="number">1</span>)) {</span><br><span class="line">                <span class="type">int</span> currentNum = num;</span><br><span class="line">                <span class="type">int</span> currentStreak = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">while</span> (num_set.<span class="built_in">count</span>(currentNum + <span class="number">1</span>)) {</span><br><span class="line">                    currentNum += <span class="number">1</span>;</span><br><span class="line">                    currentStreak += <span class="number">1</span>;</span><br><span class="line">                }</span><br><span class="line"></span><br><span class="line">                longestStreak = <span class="built_in">max</span>(longestStreak, currentStreak);</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> longestStreak;           </span><br><span class="line">    }</span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure><h1 id="移动零（49）"><a href="#移动零（49）" class="headerlink" title="移动零（49）"></a><a href="https://leetcode.cn/problems/move-zeroes/">移动零</a>（49）</h1><h2 id="题解思想"><a href="#题解思想" class="headerlink" title="题解思想"></a>题解思想</h2><p><strong>双指针</strong></p><p>使用第一个指针遍历只要非零就复制给第二个指针，然后第二个指针动</p><p>最终第二个指针前的所有元素就是所有非零元素，在将它之后的元素置零即可</p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">moveZeroes</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>{</span><br><span class="line">        <span class="type">int</span> a=<span class="number">0</span>,b=<span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> zero=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(a=<span class="number">0</span>;a&lt;nums.<span class="built_in">size</span>();a++){</span><br><span class="line">            <span class="keyword">if</span>(nums[a]!=<span class="number">0</span>){</span><br><span class="line">                nums[b]=nums[a];</span><br><span class="line">                b++;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">for</span>(a=b;a&lt;nums.<span class="built_in">size</span>();a++){</span><br><span class="line">            nums[a]=<span class="number">0</span>;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure><h1 id="盛最多水的容器（11）"><a href="#盛最多水的容器（11）" class="headerlink" title="盛最多水的容器（11）"></a><a href="https://leetcode.cn/problems/container-with-most-water/">盛最多水的容器</a>（11）</h1><h2 id="题解思路"><a href="#题解思路" class="headerlink" title="题解思路"></a>题解思路</h2><p>双指针</p><p>从两端开始，每次调整较短的一条</p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">maxArea</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; height)</span> </span>{</span><br><span class="line">        <span class="type">int</span> l = <span class="number">0</span>, r = height.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (l &lt; r) {</span><br><span class="line">            <span class="type">int</span> area = <span class="built_in">min</span>(height[l], height[r]) * (r - l);</span><br><span class="line">            ans = <span class="built_in">max</span>(ans, area);</span><br><span class="line">            <span class="keyword">if</span> (height[l] &lt;= height[r]) {</span><br><span class="line">                ++l;</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">else</span> {</span><br><span class="line">                --r;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    }</span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> LeetCode题记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode刷题记 1</title>
      <link href="/2024/05/23/leetcode-shua-ti-ji-1/"/>
      <url>/2024/05/23/leetcode-shua-ti-ji-1/</url>
      
        <content type="html"><![CDATA[<h1 id="字母异位词分组（49）"><a href="#字母异位词分组（49）" class="headerlink" title="字母异位词分组（49）"></a><a href="https://leetcode.cn/problems/group-anagrams/">字母异位词分组</a>（49）</h1><h2 id="unordered-map用法"><a href="#unordered-map用法" class="headerlink" title="unordered_map用法"></a>unordered_map用法</h2><p>unordered_map不会根据key的大小进行排序，存储时是根据key的hash值判断元素是否相同，即unordered_map内部元素是无序的。unordered_map的底层是一个防冗余的哈希表（开链法避免地址冲突）。</p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">unordered_map&lt;string, vector&lt;string&gt;&gt; m;</span><br><span class="line">m[sortedS].<span class="built_in">push_back</span>(i)</span><br></pre></td></tr></tbody></table></figure><h2 id="auto关键字用于循环"><a href="#auto关键字用于循环" class="headerlink" title="auto关键字用于循环"></a>auto关键字用于循环</h2><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> &amp;s : strs) {</span><br><span class="line">    <span class="comment">// 循环体</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ul><li><code>auto</code> 是C++11引入的关键字，用于自动推断变量的类型。</li><li><code>&amp;s</code> 是循环变量的声明，表示将容器中的每个元素赋值给变量 <code>s</code>。<code>&amp;</code> 表示使用引用（reference）语义，可以直接修改容器中的元素。</li><li><code>strs</code> 是要遍历的容器。</li></ul><h2 id="题解思想"><a href="#题解思想" class="headerlink" title="题解思想"></a>题解思想</h2><p>将每个字符串内部进行排序，由此如abb和bab都将变成abb</p><p>然后将每个排序好的字符串入unordered_map，键是排序好的abb，建值是abb和bab</p><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;vector&lt;string&gt;&gt; <span class="built_in">groupAnagrams</span>(vector&lt;string&gt;&amp; strs) {</span><br><span class="line">        unordered_map&lt;string,vector&lt;string&gt;&gt;m;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> &amp;i:strs){</span><br><span class="line">            string sortedS=i;</span><br><span class="line">            <span class="built_in">sort</span>(sortedS.<span class="built_in">begin</span>(),sortedS.<span class="built_in">end</span>());</span><br><span class="line">            m[sortedS].<span class="built_in">push_back</span>(i);</span><br><span class="line">        }</span><br><span class="line">        vector&lt;vector&lt;string&gt;&gt;res;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> &amp;i:m){</span><br><span class="line">            res.<span class="built_in">push_back</span>(i.second);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    }</span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> LeetCode题记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法，刷题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>抓取网页数据</title>
      <link href="/2024/05/22/zhua-qu-wang-ye-shu-ju/"/>
      <url>/2024/05/22/zhua-qu-wang-ye-shu-ju/</url>
      
        <content type="html"><![CDATA[<h1 id="实用机器学习–网页数据抓取"><a href="#实用机器学习–网页数据抓取" class="headerlink" title="实用机器学习–网页数据抓取"></a>实用机器学习–网页数据抓取</h1><p>在机器学习任务中从网页抓取数据是很必要的，本文介绍一次抓取网页评论的实践</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line">chrome_options = webdriver.ChromeOptions()</span><br><span class="line">chrome_options.headless = <span class="literal">True</span></span><br><span class="line">chrome = webdriver.Chrome(options=chrome_options)</span><br><span class="line"><span class="comment">#webdriver配置</span></span><br><span class="line"></span><br><span class="line">chrome.get(<span class="string">'url'</span>)</span><br><span class="line">page = chrome.page_source</span><br><span class="line"><span class="comment">#获取网页</span></span><br><span class="line"></span><br><span class="line">pages=BeautifulSoup(page, <span class="string">'html.parser'</span>)</span><br><span class="line">comments = [a.text <span class="keyword">for</span> a <span class="keyword">in</span> pages.find(<span class="string">'div'</span>,<span class="string">'comments-list'</span>).find_all(<span class="string">'p'</span>)]</span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> comments:</span><br><span class="line">    <span class="built_in">print</span>(item)</span><br><span class="line"><span class="comment">#抓取网页中评论信息</span></span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> 实用机器学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mac跨网络远程桌面</title>
      <link href="/2024/05/13/mac-kua-wang-luo-yuan-cheng-zhuo-mian/"/>
      <url>/2024/05/13/mac-kua-wang-luo-yuan-cheng-zhuo-mian/</url>
      
        <content type="html"><![CDATA[<h1 id="Mac跨网络远程桌面"><a href="#Mac跨网络远程桌面" class="headerlink" title="Mac跨网络远程桌面"></a>Mac跨网络远程桌面</h1><p>本人有一台Macbook air续航优秀，实验室放着一台windows，故想在外面的时候也能访问本地文件或应用</p><p>遂尝试远程桌面</p><p>mac端需要microsoft remote desktop</p><p>win端需要打开远程权限（具体可自行Google）</p><h2 id="试错1"><a href="#试错1" class="headerlink" title="试错1"></a>试错1</h2><p>按照Google到的一些远程app厂家的指导，并不可以连接</p><p>想跨网络连接需要穿透内网或者就付费市面上的远程桌面app</p><h2 id="试错2"><a href="#试错2" class="headerlink" title="试错2"></a>试错2</h2><p>本着能不付费就不付费的原则，开始试错</p><p>先尝试了在路由器端设置端口转发</p><p>此时仍无法连接</p><h2 id="成功经验"><a href="#成功经验" class="headerlink" title="成功经验"></a>成功经验</h2><p>但在路由器上看到路由器自带了一个叫ZeroTier的VPN软件</p><p>突然想到是不是可以在路由器上实现VPN连接呢？</p><p>在查这个软件时发现这个东西这么简单易用，遂尝试之</p><p>发现两台电脑都连接路由器的网络id后仍然无法成功</p><p>然后尝试让mac连接win的id</p><p>成功！！</p><p>然后设置了一些允许网卡在睡眠中唤醒PC，就可以实现随时随地访问实验室的PC了</p><h2 id="具体步骤"><a href="#具体步骤" class="headerlink" title="具体步骤"></a>具体步骤</h2><ol><li><p>在win和mac端都下载zerotier</p></li><li><p>打开一系列允许连接选项，将两台都连接到同一id</p></li><li><p>在这个id下管理网络，查看两台的IP（zerotier会给两台分配IP）</p></li><li><p>在mac端microsoft remote desktop上使用分配的IP连接</p></li><li><p>账号密码都是win的用户名密码（非pin，是win的注册账号密码）</p><p>然后就成功连接！</p></li></ol><h2 id="后续"><a href="#后续" class="headerlink" title="后续"></a>后续</h2><p>突然没用了</p><p>推测问题：</p><ol><li><p>端口被占用，经过查找后发现svchost.exe占用了3389，遂将其杀死</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">netstat -ano //查看所有端口使用情况</span><br><span class="line">netstat -an | findstr "3389" //若返回结果则被占用</span><br><span class="line">taskkill /PID &lt;进程ID&gt; /F</span><br></pre></td></tr></tbody></table></figure></li><li><p>按<a href="https://blog.csdn.net/anlr2020/article/details/119540139">这篇文章</a>设置了两条路由，分别是win所在网段和mac所在网段之后可以ping通，也可以重新远程</p></li></ol><p>连接不稳定的问题：</p><p>​上一秒还能ping通，下一秒就直接无法路由到，感觉是因为zerotier建在国外</p><h2 id="云服务器搭建zerotier-moon"><a href="#云服务器搭建zerotier-moon" class="headerlink" title="云服务器搭建zerotier moon"></a>云服务器搭建zerotier moon</h2><p>阿里云的服务器 Ubuntu系统</p><h4 id="第一步-在云服务器上安装-zerotier-one"><a href="#第一步-在云服务器上安装-zerotier-one" class="headerlink" title="第一步 在云服务器上安装 zerotier-one"></a>第一步 在云服务器上安装 zerotier-one</h4><p><strong>方法一 更简单</strong></p><p>shell</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ curl -s https://install.zerotier.com | sudo bash</span><br></pre></td></tr></tbody></table></figure><p><strong>方法二 更安全</strong></p><blockquote><p>要求系统中安装了 GPG</p></blockquote><p>shell</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ curl -s 'https://raw.githubusercontent.com/zerotier/ZeroTierOne/master/doc/contact%40zerotier.com.gpg' | gpg --import &amp;&amp; \</span><br><span class="line">if z=$(curl -s 'https://install.zerotier.com/' | gpg); then echo "$z" | sudo bash; fi</span><br></pre></td></tr></tbody></table></figure><h4 id="第二步-云服务器加入虚拟网络"><a href="#第二步-云服务器加入虚拟网络" class="headerlink" title="第二步 云服务器加入虚拟网络"></a>第二步 云服务器加入虚拟网络<a href="https://tvtv.fun/vps/001.html#%E7%AC%AC%E4%BA%8C%E6%AD%A5-%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%8A%A0%E5%85%A5%E8%99%9A%E6%8B%9F%E7%BD%91%E7%BB%9C"></a></h4><p>执行命令，将云服务器加入到自己创建好的虚拟网络，将命令中的 <code>xxxxxxxx</code> 替换成实际的虚拟网络 ID。</p><p>shell</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo zerotier-cli join xxxxxxxx</span><br></pre></td></tr></tbody></table></figure><h4 id="第三步-配置-Moon"><a href="#第三步-配置-Moon" class="headerlink" title="第三步 配置 Moon"></a>第三步 配置 Moon<a href="https://tvtv.fun/vps/001.html#%E7%AC%AC%E4%B8%89%E6%AD%A5-%E9%85%8D%E7%BD%AE-moon"></a></h4><p>进入 zerotier-one 程序所在的目录，默认为 <code>/var/lib/zerotier-one</code>。</p><p>shell</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ cd /var/lib/zerotier-one</span><br></pre></td></tr></tbody></table></figure><p><strong>生成 moon.json 配置文件</strong></p><p>shell</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo zerotier-idtool initmoon identity.public &gt;&gt; moon.json</span><br></pre></td></tr></tbody></table></figure><p><strong>编辑 moon.json 配置文件</strong></p><p>shell</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo nano moon.json</span><br></pre></td></tr></tbody></table></figure><p>将配置文件中的 <code>"stableEndpoints": []</code> 修改成 <code>"stableEndpoints": ["ServerIP/9993"]</code>，将 <code>ServerIP</code> 替换成云服务器的公网IP。</p><p><strong>生成 .moon 文件</strong></p><p>shell</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo zerotier-idtool genmoon moon.json</span><br></pre></td></tr></tbody></table></figure><p>将生成的 000000xxxxxxxxxx.moon 移动到 <code>moons.d</code> 目录</p><p>shell</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo mkdir moons.d</span><br><span class="line">$ sudo mv 000000xxxxxxxxxx.moon moons.d</span><br></pre></td></tr></tbody></table></figure><blockquote><p>.moon 配置文件的名一般为<code>10个前导零</code>+<code>本机的节点ID</code></p></blockquote><p><strong>重启 zerotier-one 服务</strong></p><p>shell</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo systemctl restart zerotier-one</span><br></pre></td></tr></tbody></table></figure><h4 id="使用-Moon"><a href="#使用-Moon" class="headerlink" title="使用 Moon"></a>使用 Moon<a href="https://tvtv.fun/vps/001.html#%E4%BD%BF%E7%94%A8-moon"></a></h4><p>普通的 Zerotier 成员使用 Moon 有两种方法，第一种方法是使用 <code>zerotier-cli orbit</code> 命令直接添加 Moon 节点ID；第二种方法是在 zerotier-one 程序的根目录创建<code>moons.d</code>文件夹，将 <code>xxx.moon</code> 复制到该文件夹中，我们采用第一种方法：</p><h5 id="Linux-系统下使用-Moon"><a href="#Linux-系统下使用-Moon" class="headerlink" title="Linux 系统下使用 Moon"></a>Linux 系统下使用 Moon<a href="https://tvtv.fun/vps/001.html#linux-%E7%B3%BB%E7%BB%9F%E4%B8%8B%E4%BD%BF%E7%94%A8-moon"></a></h5><p>将命令中的两组 <code>xxxxxxxxxx</code> 都替换成 moon 的节点ID。</p><p>shell</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo zerotier-cli orbit xxxxxxxxxx xxxxxxxxxx</span><br></pre></td></tr></tbody></table></figure><p>检查是否添加成功</p><p>shell</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo zerotier-cli listpeers</span><br></pre></td></tr></tbody></table></figure><h5 id="Windows-系统下使用-Moon"><a href="#Windows-系统下使用-Moon" class="headerlink" title="Windows 系统下使用 Moon"></a>Windows 系统下使用 Moon<a href="https://tvtv.fun/vps/001.html#windows-%E7%B3%BB%E7%BB%9F%E4%B8%8B%E4%BD%BF%E7%94%A8-moon"></a></h5><p>以管理员身份打开 PowerShell，将命令中的两组 <code>xxxxxxxxxx</code> 都替换成 moon 的节点ID。</p><p>powershell</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PS C:\Windows\system32&gt; zerotier-cli.bat orbit xxxxxxxxxx xxxxxxxxxx</span><br></pre></td></tr></tbody></table></figure><p>检查是否添加成功</p><p>powershell</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PS C:\Windows\system32&gt; zerotier-cli.bat listpeers</span><br></pre></td></tr></tbody></table></figure><blockquote><p><strong>提示</strong>：Windows 系统的默认程序目录位于 <code>C:\Program Files (x86)\ZeroTier\One</code>。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 番外 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>个人博客站搭建</title>
      <link href="/2024/05/13/ge-ren-bo-ke-zhan-da-jian/"/>
      <url>/2024/05/13/ge-ren-bo-ke-zhan-da-jian/</url>
      
        <content type="html"><![CDATA[<h1 id="个人博客站"><a href="#个人博客站" class="headerlink" title="个人博客站"></a>个人博客站</h1><h3 id="1-安装-Node-js"><a href="#1-安装-Node-js" class="headerlink" title="1. 安装 Node.js"></a>1. 安装 Node.js</h3><p>官网：<a href="https://nodejs.org/en/">nodejs.org</a></p><p>安装后在 cmd 命令行输入 <code>node -v</code> 即可查看版本。</p><h3 id="2-注册-GitHub"><a href="#2-注册-GitHub" class="headerlink" title="2. 注册 GitHub"></a>2. 注册 GitHub</h3><p>注册后，创建仓库：<a href="https://github.com/username/username.github.io">https://github.com/username/username.github.io</a></p><p>此时在浏览器中已经可以访问域名：<a href="https://username.github.io/">https://username.github.io</a></p><p>注意，仓库名必须取 <code>&lt;username&gt;.github.io</code>，如果仓库取了其他名字，最后访问的域名会是：https://用户名.github.io/仓库名/</p><h3 id="3-下载-Git"><a href="#3-下载-Git" class="headerlink" title="3. 下载 Git"></a>3. 下载 Git</h3><p>官网：<a href="https://gitforwindows.org/">gitforwindows.org</a></p><p>安装时按照默认配置即可，其中有个 MinTTY 终端模拟器的选项会默认选上，如果不选则会使用 Windows 自带的终端 cmd 显示 Git 。</p><p>安装后在 cmd 命令行输入 <code>git</code> 即可调出功能目录。</p><p>此后就在 cmd 中配置 Git 个人基本信息（绑定 GitHub）：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name "username"</span><br><span class="line">git config --global user.email "631670924@qq.com"</span><br></pre></td></tr></tbody></table></figure><p>配置完才后续才可以正常提交远程仓库（详见博客 Git 分类下其他文章）。</p><h3 id="4-配置-GitHub-SSH"><a href="#4-配置-GitHub-SSH" class="headerlink" title="4. 配置 GitHub SSH"></a>4. 配置 GitHub SSH</h3><p>该步骤旨在建立当前主机与 GitHub 的安全连接，以后提交/拉取仓库才不需要重复输入密码。如果你这台主机已经建立过 SSH 连接，那么可以跳过这一步。</p><p>打开 Git  输入命令：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C "631670924@qq.com" # 获取 SSH Key</span><br></pre></td></tr></tbody></table></figure><p>完成后，在提示路径下找到 .ssh 文件夹中的 id_rsa.pub 公钥文件，用记事本打开拷贝。</p><p>在 GitHub 个人设置中找到 SSH，新建，输入 Key。</p><p>配置后可以用如下命令测试是否成功：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> ssh -T git@github.com</span><br><span class="line"># 运行结果出现类似如下即表示成功</span><br><span class="line"># Hi username! You've successfully authenticated, but GitHub does not provide shell access.</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h3 id="5-安装-Hexo"><a href="#5-安装-Hexo" class="headerlink" title="5. 安装 Hexo"></a>5. 安装 Hexo</h3><p>官网：<a href="https://hexo.io/zh-cn/">hexo.io</a>，有中文官网。</p><p>在电脑中新建 Blog 文件夹，如 <code>D:\Blog</code>。</p><p>在 cmd 命令行打开 D 盘，用 <code>cd Blog</code>命令进入 Blog 子目录。或者在文件夹路径栏直接输入 <code>cmd</code>。</p><p>输入 Hexo 官网上的全局安装命令：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-cli -g</span><br></pre></td></tr></tbody></table></figure><p>输入初始化部署命令：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init username</span><br></pre></td></tr></tbody></table></figure><p>该步骤<em>报错</em>：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo : 无法加载文件 C:\Users\****\AppData\Roaming\npm\hexo.ps1，因为在此系统上禁止运行脚本。有关详细信息，请参阅 https</span><br><span class="line">:/go.microsoft.com/fwlink/?LinkID=135170 中的 about_Execution_Policies。</span><br><span class="line">所在位置 行:1 字符: 1</span><br></pre></td></tr></tbody></table></figure><p>解决办法：在windows设置中的开发者选项打开powershell未签名情况下运行</p><p>重新初始化部署</p><p>即可在 Blog 目录下新建<strong>博客文件夹</strong> username。用 <code>cd username</code>命令进入博客子目录。</p><p>输入安装 Node.js 包管理器命令，安装所有的依赖：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></tbody></table></figure><p>输入生成本地预览命令：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></tbody></table></figure><p>默认会生成 <code>localhost:4000</code> 端口的网址，在浏览器中可以访问。</p><h3 id="6-安装编辑器"><a href="#6-安装编辑器" class="headerlink" title="6. 安装编辑器"></a>6. 安装编辑器</h3><p>主要用于编写文档和修改配置，这里选择 VsCode 或者 Typora 均可，打开路径 <code>username/source/_posts/hello-world.md</code>，随便修改内容后保存。</p><p>在 username 目录中运行 Git 。</p><p>依次输入清理缓存、生成博客文件（静态页面）、<strong>生成本地预览</strong>命令：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo cl # 表示 clean</span><br><span class="line">hexo g  # 表示 generate</span><br><span class="line">hexo s  # 表示 server</span><br></pre></td></tr></tbody></table></figure><p>在浏览器中访问即可查看更改。之后按下 Ctrl + C 即可退出预览进程。</p><h3 id="7-将-Hexo-发布至-GitHub"><a href="#7-将-Hexo-发布至-GitHub" class="headerlink" title="7. 将 Hexo 发布至 GitHub"></a>7. 将 Hexo 发布至 GitHub</h3><p>打开路径 <code>username/_config.yml</code>，更改基础参数。</p><ul><li><code>#Site</code> 部分的站点描述自行修改</li><li><code>#URL</code> 部分，将链接改为 <a href="https://username.github.io/">https://username.github.io</a></li><li><code>#Deployment</code> 部分</li><li><code>type</code> 改为 git</li><li><code>repo</code> 改为 <a href="https://github.com/username/username.github.io.git">https://github.com/username/username.github.io.git</a></li><li><code>branch</code> 改为 main（旧版本默认分支叫 master）</li></ul><p>！！注意不要在连接外或者字段外加任何符号（官网给的括号很有误导性）</p><p>进入 Hexo 官网，复制 hexo-deployer-git 的安装命令，在 Git  中安装。</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></tbody></table></figure><p>依次输入清理缓存、生成博客文件（静态页面）、<strong>提交远程仓库</strong>命令：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo cl</span><br><span class="line">hexo g</span><br><span class="line">hexo d  # 表示 deploy，安装了上面的 hexo-deployer-git 才可用</span><br></pre></td></tr></tbody></table></figure><p>初次使用该操作可能会弹出一个 GitHub 登录界面，用于当前主机的身份验证。</p><p>在浏览器中访问 <a href="https://username.github.io/">https://username.github.io</a> 即可查看站点。</p><h2 id="Hexo-使用"><a href="#Hexo-使用" class="headerlink" title="Hexo 使用"></a>Hexo 使用</h2><p>以下介绍其他常用的 Hexo 操作命令，需要在博客文件夹下打开 Git  使用。</p><h3 id="新建文章"><a href="#新建文章" class="headerlink" title="新建文章"></a>新建文章</h3><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo n "文章名" # 代表 new</span><br></pre></td></tr></tbody></table></figure><p>文章名不需要文件后缀，会自动生成 Markdown 文件，且带有预先定义的参数（在 Front-matter 中），如标题、日期、标签等。</p><p>以下是一些常用的参数及默认设置：</p><table><thead><tr><th>参数</th><th>描述</th><th>默认值</th></tr></thead><tbody><tr><td><code>title</code></td><td>标题，最好用<strong>引号</strong>括起来</td><td>文章的文件名</td></tr><tr><td><code>date</code></td><td>建立日期</td><td>文件建立日期</td></tr><tr><td><code>updated</code></td><td>更新日期</td><td>文件更新日期</td></tr><tr><td><code>comments</code></td><td>开启文章的评论功能</td><td>true</td></tr><tr><td><code>categories</code></td><td>分类（不适用于分页）</td><td>无</td></tr><tr><td><code>tags</code></td><td>标签（不适用于分页）</td><td>无</td></tr><tr><td><code>excerpt</code></td><td>摘要，优先于 <code>&lt;!-- more --&gt;</code></td><td>无</td></tr><tr><td><code>index_img</code></td><td>文章封面图，用 /img/ 相对路径</td><td>无</td></tr><tr><td><code>math</code></td><td>公式转换，关闭时加速加载</td><td>true</td></tr><tr><td><code>sticky</code></td><td>文章置顶，数值越大越靠前</td><td>无</td></tr></tbody></table><p>注意 Hexo 采用的是 GitHub Favored Markdown，书写规范与标准 Markdown 有微小区别，可以查阅 GitHub 上的说明。</p><h3 id="布局管理"><a href="#布局管理" class="headerlink" title="布局管理"></a>布局管理</h3><p>在上面新建文章时，我们还可以制定布局：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo n [layout] "文章名" </span><br></pre></td></tr></tbody></table></figure><p>其中，<code>layout</code> 可替换为 post（文章，默认）、draft（草稿）、page（页面）。默认值可以在配置文件中修改 <code>default_layout</code> 来改动。不同布局的文件会存储在不同位置。</p><p>对于 page 布局，Hexo 会创建一个以标题为名字的目录，并在目录中放置一个 index.md 文件，页面布局顾名思义就是用来 DIY 我们博客页面的，不会被渲染。</p><p>对于 draft 布局，在建立时会被保存到 <code>source/drafts</code> 文件夹中，但不会显示在页面上，如果我们不想某一篇文章显示在页面上，也可以把它移动到该文件夹中。</p><p>此外，还有关于 draft 的一些操作：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo s --draft  # 在服务器预览时加入草稿文件</span><br><span class="line">hexo publish [layout] "文章名"  # 将草稿发布为 post 或 page</span><br></pre></td></tr></tbody></table></figure><h3 id="修改默认布局"><a href="#修改默认布局" class="headerlink" title="修改默认布局"></a>修改默认布局</h3><p>上述布局管理中的三种布局，还对应这三种模板，这些模板可以在 <code>username/scaffolds</code> 路径下找到，我们可以提前修改 post 模板，这样每次新建文章时就不需要自己添加 Front-matter 了。</p><p>以下是我修改后的 Front-matter 布局：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">title: {{ title }}</span><br><span class="line">excerpt: ''</span><br><span class="line">index_img: /img/home/</span><br><span class="line">math: false</span><br><span class="line">date: {{ date }}</span><br><span class="line">updated:</span><br><span class="line">category_bar: ["分类"]</span><br><span class="line">categories:</span><br><span class="line">tags:</span><br><span class="line">sticky: </span><br><span class="line"></span><br><span class="line">YAML</span><br></pre></td></tr></tbody></table></figure><h3 id="分类和标签"><a href="#分类和标签" class="headerlink" title="分类和标签"></a>分类和标签</h3><p>在其他系统中，分类和标签听起来很接近，但是在 Hexo 中两者有着明显的差别：分类具有顺序性和层次性，也就是说 <code>Foo, Bar</code> 不等于 <code>Bar, Foo</code>；而标签没有顺序和层次。</p><p>首先要创建「分类」和「标签」本身所在的<strong>页面</strong>，打开博客文件夹，执行 <code>hexo new page xxx</code> 命令。Fluid 主题不需要，已经自带「分类」、「标签」和「归档」页面了，故这里不展开介绍。</p><p>此后就可以 post 布局的文章指定分类和标签了，也需要在对应文章的 Front-matter 中设置。Hexo 不鼓励给一篇文章指定<strong>多个同级分类</strong>，因此需要规划好。下面是指定方法：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">categories:</span><br><span class="line"> - 技术经验</span><br><span class="line"> - 博客  # 「博客」会作为「技术经验」的子类</span><br><span class="line">tags:</span><br><span class="line"> - Hexo</span><br><span class="line"> - Git  # 「Hexo」与「Git」是同级标签</span><br><span class="line"></span><br><span class="line">YAML</span><br></pre></td></tr></tbody></table></figure><p>当然，Hexo 还提供了一种类 WordPress 的分类方式，用于指定多个同级分类：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">categories:</span><br><span class="line">- [Diary, PlayStation]</span><br><span class="line">- [Diary, Games]</span><br><span class="line">- [Life]  # 文章会同时出现在三个类别中</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> 番外 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
